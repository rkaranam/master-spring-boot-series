Day 04: 09-Oct-2019
Udemy Course: Learn Spring Boot in 100 Steps - Beginner to Expert
1. Completed Step 09: Magic of Spring
             Step 10: Create TodoController, list-todos view and TodoService
             Step 11: Architecture of Web Applications
2. Learnt how below annotations work in a Spring Boot application
    a. @Component, @Controller, @Service and @Repository
    b. @Autowired
    c. @ComponentScan
3. Completed a POC that explains how @ComponentScan works
4. Created a TodoController(controller) which redirects requests to TodoService(service)
   and presents the data retrieved on a list-todos.jsp page(view)
5. Used a in-memory static arraylist of todos, which we will change in later point of course
6. Now, flow of the application is as follows:
    Browser -> /login -> LoginController -> LoginService -> validateUser
    -> false -> Invalid Credentials -> login.jsp
    -> true -> welcome.jsp -> Todos Link -> /list-todos -> TodoController
    -> TodoService -> todos -> list-todos.jsp

Day 05: 10-Oct-2019
Udemy Course: Learn Spring Boot in 100 Steps - Beginner to Expert
1. Completed Step 12: Session vs Model vs Request - @SessionAttributes
2. Session is the way to store values across multiple requests
3. Values in request are request scope
4. Values in model are by default request scope
5. Http is a stateless protocol
6. @SessionAttributes to store values across multiple request - Session

Day 06: 11-Oct-2019
Udemy Course: Learn Spring Boot in 100 Steps - Beginner to Expert
1. Completed Step 13: Add new todo
2. Learnt how to redirect to another request mapping from the controller's method
3. Add 'redirect:/mapping' instead of view

Day 07: 12-Oct-2019
Udemy Course: Learn Spring Boot in 100 Steps - Beginner to Expert
1. Completed Step 14: Display Todos in a table format using JSTL tags
2. Added jstl dependency in pom.xml. Added jstl core taglib top of list-todos.jsp page
3. Learnt how to display todos using jstl <c:forEach> tag.

Day 08: 13-Oct-2019
Udemy Course: Learn Spring Boot in 100 Steps - Beginner to Expert
1. Completed Step 15: Bootstrap for Page formatting using webjars
             Step 16: Delete a todo
             Step 17: Format add Todo page and adding basic HTML5 form validation
2. Webjars is the way of adding static files(bootstrap, jquery etc.) as dependencies to project
3. Added boostrap css functionalities list-todos.jsp page
4. Played around with bootstrap css classes: table table-striped, container
5. Wrote a deleteTodo method in controller that takes id of the task to be deleted and delete
   it from the arrayList.
6. Used bootstrap css classes for button deletion: btn btn-warning
7. Learnt how to pass taskId in href of a link
8. Formatted add-todo page with boostrap css classes: btn btn-success, <fieldset>, form-group, form-control
9. Added basic HTML5 validation using required="required" for input